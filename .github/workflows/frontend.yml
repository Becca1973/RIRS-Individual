name: Frontend CI

on:
  push:
    branches:
      - main
      - production
  pull_request:
    branches:
      - main
      - production

jobs:
  build-frontend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/package-lock.json') }} # Klju훾 za cache
          restore-keys: |
            ${{ runner.os }}-frontend-
      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Build application # Gradnja aplikacije
        run: |
          cd frontend
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/build/

  test-frontend:
    needs: build-frontend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Cache node_modules # Caching odvisnosti
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-

      - name: Install dependencies
        run: |
          cd frontend
          npm install

      - name: Run tests with coverage
        run: |
          cd frontend
          npm run test:ci

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: frontend/coverage/
  #DOCKER
  dockerize-and-push-dev:
    needs: test-frontend
    runs-on: ubuntu-latest
    environment: Development
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub # Prijava v Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build Docker image # Gradnja Docker slike
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/frontend:dev ./frontend
          docker tag ${{ secrets.DOCKER_USERNAME }}/frontend:dev ${{ secrets.DOCKER_USERNAME }}/frontend:${{ github.sha }}

      - name: Push Docker image to Docker Hub # Potisk Docker slike na Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/frontend:dev
          docker push ${{ secrets.DOCKER_USERNAME }}/frontend:${{ github.sha }}

  # SonarCloud analiza
  sonarcloud-analysis:
    needs: test-frontend
    runs-on: ubuntu-latest
    environment:
      name: Development
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    steps:
      - name: Checkout code # Kloniranje repozitorija
        uses: actions/checkout@v3
      - name: Setup Node.js # Nastavitev Node.js okolja
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Setup Java 17 # Nastavitev Java 17 okolja
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
      - name: Install dependencies # Namestitev odvisnosti
        run: |
          cd frontend
          npm ci
      - name: Collect coverage (React-specific) # Zbiranje podatkov o pokritosti kode (React specifi훾no)
        run: |
          cd frontend
          npm run test:ci -- --coverage
        env:
          CI: true
      - name: Upload coverage report # Nalo탑itev poro훾ila o pokritosti kode
        run: |
          cp frontend/coverage/lcov.info .
      - name: Run SonarCloud analysis # Zagon SonarCloud analize
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          npx sonar-scanner \
            -Dsonar.projectKey=${{ secrets.PROJECT_KEY }} \
            -Dsonar.organization=${{ secrets.ORGANIZATION_KEY }} \
            -Dsonar.sources=./frontend \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.javascript.lcov.reportPaths=frontend/coverage/lcov.info

  # Gradnja Docker slike in nalaganje na Docker Hub - Production
  dockerize-and-push-prod:
    needs: [test-frontend, sonarcloud-analysis]
    runs-on: ubuntu-latest

    if: github.ref == 'refs/heads/production'

    environment:
      name: Production

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check SonarCloud Quality Gate # Preverjanje SonarCloud kakovostne meje
        run: |
          curl -u ${{ secrets.SONAR_TOKEN }}: \
            "https://sonarcloud.io/api/project_badges/measure?project=${{ secrets.PROJECT_KEY }}&metric=alert_status" | grep -q "OK" || exit 1

      - name: Login to Docker Hub # Prijava v Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build Docker image # Gradnja Docker slike
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/frontend:prod ./frontend
          docker tag ${{ secrets.DOCKER_USERNAME }}/frontend:prod ${{ secrets.DOCKER_USERNAME }}/frontend:${{ github.sha }}

      - name: Push Docker image to Docker Hub # Potisk Docker slike na Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/frontend:prod
          docker push ${{ secrets.DOCKER_USERNAME }}/frontend:${{ github.sha }}

  deploy-pages:
    needs: test-frontend
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to GitHub Pages # Implementacija na GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
